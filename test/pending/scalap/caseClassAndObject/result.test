object CaseClassAndObject extends java.lang.Object with scala.ScalaObject {
  def this() = { /* compiled code */ }
  @scala.serializable
  case class A() extends java.lang.Object with scala.ScalaObject with scala.Product {
    override def hashCode() : scala.Int = { /* compiled code */ }
    override def toString() : scala.Predef.String = { /* compiled code */ }
    override def equals(x$1 : scala.Any) : scala.Boolean = { /* compiled code */ }
    override def productPrefix : java.lang.String = { /* compiled code */ }
    override def productArity : scala.Int = { /* compiled code */ }
    override def productElement(x$1 : scala.Int) : scala.Any = { /* compiled code */ }
    override def canEqual(x$1 : scala.Any) : scala.Boolean = { /* compiled code */ }
  }
  object A extends java.lang.Object with scala.ScalaObject {
    def this() = { /* compiled code */ }
  }
}
